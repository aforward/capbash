#!/usr/bin/env bash

add_known_host()
{
  DEPLOYKEYS_HOSTURL=${1-github.com}
  mkdir -p $HOME/.ssh
  ssh-keyscan -H $DEPLOYKEYS_HOSTURL 2> /dev/null >> $HOME/.ssh/known_hosts
}

install_app()
{
  SCRIPT_NAME=$1
  APT_GET_NAME=${2-$SCRIPT_NAME}
  if [[ "`which $SCRIPT_NAME 2> /dev/null`" == "" ]]; then
    if [[ "`which apt-get 2> /dev/null`" != "" ]]; then
      echo "Installing $SCRIPT_NAME via apt-get ($APT_GET_NAME)"
      apt-get install -y $APT_GET_NAME
    else
      echo "Please install $SCRIPT_NAME."
      exit 1
    fi
  fi
}

install_git()
{
  install_app "git"

  if [[ `git config --global user.email` == "" ]]; then
    git config --global user.email "`hostname`@localhost"
  fi

  if [[ `git config --global user.name` == "" ]]; then
    git config --global user.name "`hostname`"
  fi
}

install_bundler()
{
  if [[ "`which bundler 2> /dev/null`" == "" ]]; then
    gem install bundler
  fi
}

install_ruby()
{
  install_app "ruby"
  install_bundler
}

usage()
{
  printf "%b" "
Usage

  capbash [action]

Global Actions (applies outside of any particular project)

  new                     - Create a new capbash project
  update-self             - Updates capbash to the lastest version
  ls                      - Show all available modules (e.g. docker, nginx)
  help                    - Displays this output.

Project Actions (applies to a specific project, and must be run from within that project)

  udpate                  - Updates all project modules, including the capbash bootstrap
  install <module>        - Installs a particular module into your project, e.g. 'capbash install docker'
  uninstall <module>      - Uninstalls the module, e.b. 'capbash uninstall nginx'

Deployment Actions (applies to a specific project, and is geared towards running things on remote servers)

  deploy <server> <node>  - Deploys to server (e.g. 192.169.10.11) and node (install scripts located in ./nodes directory)
  push <server>           - Synchronizes local project to remote server, but does not install / configure the node
  pull <server>           - Synchronizes remote server to a local project (will pick up non committed/private assets and nodes)

"
}

ls_modules()
{
  printf "%b" "
Available capbash bits (aka subtrees):
  -- apache (another webserver)
  -- cron (manage cron jobs)
  -- deploykeys (a simple public/private key manager to enable access to other servers / services)
  -- docker (docker up and running in a jiffy)
  -- drupal (installs a drupal admin console for deploying one or more instances of drupal)
  -- elixir (installs a tagged version of elixir)
  -- git
  -- monit (for monitoring your server)
  -- mysql (installs mysql in a docker container)
  -- nginx (a webserver running mostly within a container)
  -- phoenix (installs phoenix web applications based on the elixir language)
  -- rails (installs rails web applications based on the ruby language)
  -- sphinx (installs sphinx indexing service)
  -- tarball (extracts compressed files with ease)

To install docker, for example, run:
  cd /path/to/your/devops/project
  capbash install docker
"
}

if [[ "$1" == "help" ]]; then
  usage
  exit 0

elif [[ "$1" == "new" ]]; then
  NAME=${2-devops}
  if [[ -e $NAME ]]; then
    echo "Directory $NAME already exists, remove it and try again or pick another name please."
    exit 1
  else
    install_git
    install_ruby
    add_known_host "github.com"

    mkdir -p $NAME
    (
      cd $NAME && \
      git init && \
      mkdir -p ./bits && \
      touch ./bits/.gitkeep && \
      touch .gitignore && \
      echo "assets" >> .gitignore && \
      echo "nodes" >> .gitignore && \
      git add . && \
      git commit -m "Initial commit" && \
      git remote add bootstrap https://github.com/aforward/capbash-bootstrap.git && \
      git subtree add â€”-prefix=bits/bootstrap --squash bootstrap master && \
      ./bits/bootstrap/bootstrap
    )
  fi

elif [[ "$1" == "update-self" ]]; then
  current_capbash_filename=$(which capbash)
  curl -s -o $current_capbash_filename https://raw.githubusercontent.com/aforward/capbash/master/capbash
  echo "Updated $current_capbash_filename"

elif [[ "$1" == "ls" ]]; then
  ls_modules
  exit 0

else
  # Project specific calls, delegating to bootstrap
  ./bits/bootstrap/capbash $@
fi