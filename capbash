#!/usr/bin/env bash

usage()
{
  printf "%b" "
Usage

  capbash [action]

Global Actions (applies outside of any particular project)

  update-self             - Updates capbash to the lastest version
  ls                      - Show all available modules (e.g. docker, nginx)
  help                    - Displays this output.

Project Actions (applies to a specific project, and must be run from within that project)

  udpate                  - Updates all project modules, including the capbash bootstrap
  install <module>        - Installs a particular module into your project, e.g. 'capbash install docker'
  uninstall <module>      - Uninstalls the module, e.b. 'capbash uninstall nginx'

Deployment Actions (applies to a specific project, and is geared towards running things on remote servers)

  deploy <server> <node>  - Deploys to server (e.g. 192.169.10.11) and node (install scripts located in ./nodes directory)
  sync <server>           - Synchronizes project on remote server, but does not install / configure the node
"
}

ls_modules()
{
  printf "%b" "
Available capbash submodules:
  -- apache (another webserver)
  -- cron (manage cron jobs)
  -- deploykeys (a simple public/private key manager to enable access to other servers / services)
  -- docker (docker up and running in a jiffy)
  -- drupal (installs a drupal admin console for deploying one or more instances of drupal)
  -- elixir (installs a tagged version of elixir)
  -- git
  -- monit (for monitoring your server)
  -- mysql (installs mysql in a docker container)
  -- nginx (a webserver running mostly within a container)
  -- phoenix (installs phoenix web applications based on the elixir language)
  -- rails (installs rails web applications based on the ruby language)
  -- tarball (extracts compressed files with ease)

To install docker, for example, run:
  cd /path/to/your/devops/project
  capbash install docker

"
}

if [[ "$1" == "help" ]]; then
  usage
  exit 0

elif [[ "$1" == "new" ]]; then
  NAME=${2-devops}
  if [[ -e $NAME ]]; then
    echo "Directory $NAME already exists, remove it and try again or pick another name please."
    exit 1
  else
    mkdir -p $NAME
    (
      cd $NAME &&
      git init
      mkdir -p ./submodules &&
      git submodule add https://github.com/aforward/capbash-bootstrap ./submodules/bootstrap &&
      ./submodules/bootstrap/bootstrap
    )
  fi

elif [[ "$1" == "update-self" ]]; then
  current_capbash_filename=$(which capbash)
  curl -s -o $current_capbash_filename https://raw.githubusercontent.com/aforward/capbash/master/capbash
  echo "Updated $current_capbash_filename"

elif [[ "$1" == "ls" ]]; then
  ls_modules
  exit 0

else
  # Project specific calls, delegating to bootstrap
  ./submodules/bootstrap/capbash $@
fi